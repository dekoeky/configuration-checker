name: üê≥ Docker Build & Publish

on:
  # push:
  #   branches: [ "main", "develop" ]
  #   # Publish semver tags as releases.
  #   tags: [ 'v*.*.*' ]

  # pull_request:
  #   branches: [ "main" ]

  workflow_dispatch:
  

jobs:
  build:
    name: üê≥ Build & Publish Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into docker.io
        # if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ vars.DOCKER_REGISTRY }}/${{ vars.DOCKER_IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=schedule
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
          labels: |
            maintainer=dekoeky
            org.opencontainers.image.title=Configuration Visualization
            org.opencontainers.image.description=A simple tool to debug application configurations
            org.opencontainers.image.vendor=github.com/dekoeky

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: üõ†Ô∏è Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./configuration-visualization/Dockerfile
          # push: ${{ github.event_name == 'workflow_dispatch' }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      - name: Print images
        run: docker image ls

      - name: Print images
        run: |
          echo ${{ steps.meta.outputs.tags }}
          echo ${{ steps.meta.outputs.labels }}